.TH pappl-device 3 "Documentation" "2020-10-02" "Documentation"
.SH NAME
pappl-device \- Documentation
.SH ENUMERATIONS
.SS pappl_dtype_e
Device type bit values
.TP 5
PAPPL_DTYPE_ALL
.br
All printers
.TP 5
PAPPL_DTYPE_DNS_SD
.br
Network printers discovered via DNS-SD/mDNS
.TP 5
PAPPL_DTYPE_FILE
.br
Local file/directory
.TP 5
PAPPL_DTYPE_LOCAL
.br
All local printers
.TP 5
PAPPL_DTYPE_NETWORK
.br
All network printers
.TP 5
PAPPL_DTYPE_SNMP
.br
Network printers discovered via SNMP
.TP 5
PAPPL_DTYPE_SOCKET
.br
Network printers using raw socket
.TP 5
PAPPL_DTYPE_USB
.br
USB printers
.SH FUNCTIONS
.SS papplDeviceAddScheme
Add a device URI scheme.
.PP
.nf
void papplDeviceAddScheme (
    const char *scheme, pappl_dtype_t dtype, pappl_devlist_cb_t list_cb, pappl_devopen_cb_t open_cb, pappl_devclose_cb_t close_cb, pappl_devread_cb_t read_cb, pappl_devwrite_cb_t write_cb, pappl_devstatus_cb_t status_cb
);
.fi
.SS papplDeviceClose
Close a device connection.
.PP
.nf
void papplDeviceClose (
    pappl_device_t *device
);
.fi
.SS papplDeviceError
Report an error on a device.
.PP
.nf
void papplDeviceError (
    pappl_device_t *device, const char *message, ...
);
.fi
.SS papplDeviceFlush
Flush any buffered data to the device.
.PP
.nf
void papplDeviceFlush (
    pappl_device_t *device
);
.fi
.SS papplDeviceGetData
Get device-specific data.
.PP
.nf
void * papplDeviceGetData (
    pappl_device_t *device
);
.fi
.SS papplDeviceGetMetrics
Get the device metrics.
.PP
.nf
pappl_dmetrics_t * papplDeviceGetMetrics (
    pappl_device_t *device, pappl_dmetrics_t *metrics
);
.fi
.SS papplDeviceGetStatus
Get the printer status bits.
.PP
.nf
pappl_preason_t  papplDeviceGetStatus (
    pappl_device_t *device
);
.fi
.PP
The status bits for USB devices come from the original Centronics parallel
printer "standard" which was later formally standardized in IEEE 1284-1984
and the USB Device Class Definition for Printing Devices.  Some vendor
extentions are also supported.
.PP
The status bits for socket devices come from the hrPrinterDetectedErrorState
property that is defined in the SNMP Printer MIB v2 (RFC 3805).
.PP
This function returns a \fIpappl_preason_t\fR bitfield which can be
passed to the \fIpapplPrinterSetReasons\fR function.  Use the
\fIPAPPL_PREASON_DEVICE_STATUS\fR value as the value of the \fBremove\fR
argument.
.PP
This function can block for several seconds while getting the status
information.
.SS papplDeviceList
List available devices.
.PP
.nf
bool  papplDeviceList (
    pappl_dtype_t types, pappl_device_cb_t cb, void *data, pappl_deverror_cb_t err_cb, void *err_data
);
.fi
.SS papplDeviceOpen
Open a connection to a device.
.PP
.nf
pappl_device_t * papplDeviceOpen (
    const char *device_uri, const char *name, pappl_deverror_cb_t err_cb, void *err_data
);
.fi
.PP
The "file", "snmp", "socket", and "usb" URI schemes are currently supported.
.SS papplDeviceParse1284ID
Parse an IEEE-1284 device ID string.
.PP
.nf
int  papplDeviceParse1284ID (
    const char *device_id, cups_option_t **pairs
);
.fi
.SS papplDevicePrintf
Write a formatted string.
.PP
.nf
ssize_t  papplDevicePrintf (
    pappl_device_t *device, const char *format, ...
);
.fi
.SS papplDevicePuts
Write a literal string.
.PP
.nf
ssize_t  papplDevicePuts (
    pappl_device_t *device, const char *s
);
.fi
.SS papplDeviceRead
Read from a device.
.PP
.nf
ssize_t  papplDeviceRead (
    pappl_device_t *device, void *buffer, size_t bytes
);
.fi
.SS papplDeviceSetData
Set device-specific data.
.PP
.nf
void papplDeviceSetData (
    pappl_device_t *device, void *data
);
.fi
.SS papplDeviceWrite
Write to a device.
.PP
.nf
ssize_t  papplDeviceWrite (
    pappl_device_t *device, const void *buffer, size_t bytes
);
.fi
.SH STRUCTURES
.SS pappl_dmetrics_s
Device metrics
.PP
.nf
struct pappl_dmetrics_s
{
  size_t read_bytes;
  size_t read_msecs;
  size_t read_requests;
  size_t status_msecs;
  size_t status_requests;
  size_t write_bytes;
  size_t write_msecs;
  size_t write_requests;
};
.fi
.SH TYPES
.SS PTHREAD_RWLOCK_INITIALIZER
Device scheme data
.PP
.nf
typedef static pthread_rwlock_t device_rwlock = PTHREAD_RWLOCK_INITIALIZER;
.fi
.SS pappl_devclose_cb_t
Device close callback
.PP
.nf
typedef void (*pappl_devclose_cb_t)(pappl_device_t *device);
.fi
.SS pappl_deverror_cb_t
Device error callback
.PP
.nf
typedef void (*pappl_deverror_cb_t)(const char *message, void *err_data);
.fi
.SS pappl_device_cb_t
Device callback - return \fBtrue\fR to stop, \fBfalse\fR to continue
.PP
.nf
typedef bool (*pappl_device_cb_t)(const char *device_uri, const char *device_id, void *data);
.fi
.SS pappl_devlist_cb_t
Device list callback
.PP
.nf
typedef bool (*pappl_devlist_cb_t)(pappl_device_cb_t cb, void *data, pappl_deverror_cb_t err_cb, void *err_data);
.fi
.SS pappl_devopen_cb_t
Device open callback
.PP
.nf
typedef bool (*pappl_devopen_cb_t)(pappl_device_t *device, const char *device_uri, const char *name);
.fi
.SS pappl_devread_cb_t
Device read callback
.PP
.nf
typedef ssize_t (*pappl_devread_cb_t)(pappl_device_t *device, void *buffer, size_t bytes);
.fi
.SS pappl_devstatus_cb_t
Device status callback
.PP
.nf
typedef pappl_preason_t (*pappl_devstatus_cb_t)(pappl_device_t *device);
.fi
.SS pappl_devwrite_cb_t
Device write callback
.PP
.nf
typedef ssize_t (*pappl_devwrite_cb_t)(pappl_device_t *device, const void *buffer, size_t bytes);
.fi
.SS pappl_dmetrics_t
Device metrics
.PP
.nf
typedef struct pappl_dmetrics_s pappl_dmetrics_t;
.fi
.SS pappl_dtype_t
Device type bitfield
.PP
.nf
typedef unsigned pappl_dtype_t;
.fi
.SH AUTHOR
.PP
Unknown
.SH COPYRIGHT
.PP
Unknown
