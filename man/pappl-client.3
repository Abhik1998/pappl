.TH pappl-client 3 "Documentation" "2020-10-23" "Documentation"
.SH NAME
pappl-client \- Documentation
.SH FUNCTIONS
.SS papplClientGetCSRFToken
Get a unique Cross-Site Request Forgery token
string.
.PP
.nf
char * papplClientGetCSRFToken (
    pappl_client_t *client,
    char *buffer,
    size_t bufsize
);
.fi
.PP
This function generates and returns a unique Cross-Site Request Forgery
token string to be used as the value of a hidden variable in all HTML forms
sent in the response and then compared when validating the form data in the
subsequent request.
.PP
The value is based on the current system session key and client address in
order to make replay attacks infeasible.
.PP
.IN 5
Note: The \fIpapplClientHTMLStartForm\fR function automatically adds the
.IN 5
hidden CSRF variable, and the \fIpapplClientValidateForm\fR function
.IN 5
validates the value.
.SS papplClientGetCookie
Get a cookie from the client.
.PP
.nf
char * papplClientGetCookie (
    pappl_client_t *client,
    const char *name,
    char *buffer,
    size_t bufsize
);
.fi
.PP
This function gets a HTTP "cookie" value from the client request.  \fBNULL\fR
is returned if no cookie has been set by a prior request, or if the user has
disabled or removed the cookie.
.PP
Use the \fIpapplClientSetCookie\fR function to set a cookie in a response
to a request.
.PP
.IN 5
Note: Cookies set with \fIpapplClientSetCookie\fR will not be available to
.IN 5
this function until the following request.
.SS papplClientGetForm
Get form data from the web client.
.PP
.nf
int  papplClientGetForm (
    pappl_client_t *client,
    cups_option_t **form
);
.fi
.PP
For HTTP GET requests, the form data is collected from the request URI.  For
HTTP POST requests, the form data is read from the client.
.PP
The returned form values must be freed using the \fBcupsFreeOptions\fR
function.
.PP
.IN 5
Note: Because the form data is read from the client connection, this
.IN 5
function can only be called once per request.
.SS papplClientGetHTTP
Get the HTTP connection associated with a client
object.
.PP
.nf
http_t * papplClientGetHTTP (
    pappl_client_t *client
);
.fi
.PP
This function returns the HTTP connection associated with the client and is
used when sending response data directly to the client using the CUPS
\fBhttpXxx\fR functions.
.SS papplClientGetHostName
Get the hostname from the client-supplied Host:
field.
.PP
.nf
const char * papplClientGetHostName (
    pappl_client_t *client
);
.fi
.PP
This function returns the hostname that was used in the request and should
be used in any URLs or URIs that you generate.
.SS papplClientGetHostPort
Get the port from the client-supplied Host:
field.
.PP
.nf
int  papplClientGetHostPort (
    pappl_client_t *client
);
.fi
.PP
This function returns the port number that was used in the request and should
be used in any URLs or URIs that you generate.
.SS papplClientGetJob
Get the target job for an IPP request.
.PP
.nf
pappl_job_t * papplClientGetJob (
    pappl_client_t *client
);
.fi
.PP
This function returns the job associated with the current IPP request.
\fBNULL\fR is returned if the request does not target a job.
.SS papplClientGetMethod
Get the HTTP request method.
.PP
.nf
http_state_t  papplClientGetMethod (
    pappl_client_t *client
);
.fi
.PP
This function returns the HTTP request method that was used, for example
\fBHTTP_STATE_GET\fR for a GET request or \fBHTTP_STATE_POST\fR for a POST request.
.SS papplClientGetOperation
Get the IPP operation code.
.PP
.nf
ipp_op_t  papplClientGetOperation (
    pappl_client_t *client
);
.fi
.PP
This function returns the IPP operation code associated with the current IPP
request.
.SS papplClientGetOptions
Get the options from the request URI.
.PP
.nf
const char * papplClientGetOptions (
    pappl_client_t *client
);
.fi
.PP
This function returns any options that were passed in the HTTP request URI.
The options are the characters after the "?" character, for example a
request URI of "/mypage?name=value" will have an options string of
"name=value".
.PP
\fBNULL\fR is returned if the request URI did not contain any options.
.PP
.IN 5
Note: HTTP GET form variables are normally accessed using the
.IN 5
\fIpapplClientGetForm\fR function.  This function should only be used when
.IN 5
getting non-form data.
.SS papplClientGetPrinter
Get the target printer for an IPP request.
.PP
.nf
pappl_printer_t * papplClientGetPrinter (
    pappl_client_t *client
);
.fi
.PP
This function returns the printer associated with the current IPP request.
\fBNULL\fR is returned if the request does not target a printer.
.SS papplClientGetRequest
Get the IPP request message.
.PP
.nf
ipp_t * papplClientGetRequest (
    pappl_client_t *client
);
.fi
.PP
This function returns the attributes in the current IPP request, for use
with the CUPS \fBippFindAttribute\fR, \fBippFindNextAttribute\fR,
\fBippFirstAttribute\fR, and \fBippNextAttribute\fR functions.
.SS papplClientGetResponse
Get the IPP response message.
.PP
.nf
ipp_t * papplClientGetResponse (
    pappl_client_t *client
);
.fi
.PP
This function returns the attributes in the current IPP response, for use
with the CUPS \fBippAddXxx\fR and \fBippSetXxx\fR functions.  Use the
\fIpapplClientRespondIPP\fR function to set the status code and message,
if any.
.SS papplClientGetSystem
Get the containing system for the client.
.PP
.nf
pappl_system_t * papplClientGetSystem (
    pappl_client_t *client
);
.fi
.PP
This function returns the system object that contains the client.
.SS papplClientGetURI
Get the HTTP request URI.
.PP
.nf
const char * papplClientGetURI (
    pappl_client_t *client
);
.fi
.PP
This function returns the URI that was sent in the current HTTP request.
.PP
.IN 5
Note: Any options in the URI are removed and can be accessed separately
.IN 5
using the \fIpapplClientGetOptions\fR function.
.SS papplClientGetUsername
Get the authenticated username, if any.
.PP
.nf
const char * papplClientGetUsername (
    pappl_client_t *client
);
.fi
.PP
This function returns the current authenticated username, if any.
.SS papplClientHTMLAuthorize
Handle authorization for the web interface.
.PP
.nf
bool  papplClientHTMLAuthorize (
    pappl_client_t *client
);
.fi
.PP
The web interface supports both authentication against user accounts and
authentication using a single administrative access password.  This function
handles the details of authentication for the web interface based on the
system authentication service configuration (the "auth_service" argument to
\fIpapplSystemCreate\fR).
.PP
.IN 5
Note: IPP operation callbacks needing to perform authorization should use
.IN 5
the \fIpapplClientIsAuthorized\fR function instead.
.SS papplClientHTMLEscape
Send a string to a web browser client.
.PP
.nf
void papplClientHTMLEscape (
    pappl_client_t *client,
    const char *s,
    size_t slen
);
.fi
.PP
This function sends the specified string to the web browser client and
escapes special characters as HTML entities as needed, for example "&" is
sent as \fB&amp;\fR.
.SS papplClientHTMLFooter
Show the web interface footer.
.PP
.nf
void papplClientHTMLFooter (
    pappl_client_t *client
);
.fi
.PP
This function sends the standard web interface footer followed by a
trailing 0-length chunk to finish the current HTTP response.  Use the
\fIpapplSystemSetFooterHTML\fR function to add any custom HTML needed in
the footer.
.SS papplClientHTMLHeader
Show the web interface header and title.
.PP
.nf
void papplClientHTMLHeader (
    pappl_client_t *client,
    const char *title,
    int refresh
);
.fi
.PP
This function sends the standard web interface header and title.  If the
"refresh" argument is greater than zero, the page will automatically reload
after that many seconds.
.PP
Use the \fIpapplSystemAddLink\fR function to add system-wide navigation
links to the header.  Similarly, use \fIpapplPrinterAddLink\fR to add
printer-specific links, which will appear in the web interface printer if
the system is not configured to support multiple printers
(the \fBPAPPL_SOPTIONS_MULTI_QUEUE\fR option to \fIpapplSystemCreate\fR).
.SS papplClientHTMLPrintf
Send formatted text to the web browser client,
escaping as needed.
.PP
.nf
void papplClientHTMLPrintf (
    pappl_client_t *client,
    const char *format,
    ...
);
.fi
.PP
This function sends formatted text to the web browser client using
\fBprintf\fR-style formatting codes.  The format string itself is not escaped
to allow for embedded HTML, however strings inserted using the '%c' or \fB%s\fR
codes are escaped properly for HTML - "&" is sent as \fB&amp;\fR, etc.
.SS papplClientHTMLPuts
Send a HTML string to the web browser client.
.PP
.nf
void papplClientHTMLPuts (
    pappl_client_t *client,
    const char *s
);
.fi
.PP
This function sends a HTML string to the client without performing any
escaping of special characters.
.SS papplClientHTMLStartForm
Start a HTML form.
.PP
.nf
void papplClientHTMLStartForm (
    pappl_client_t *client,
    const char *action,
    bool multipart
);
.fi
.PP
This function starts a HTML form with the specified "action" path and
includes the CSRF token as a hidden variable.  If the "multipart" argument
is \fBtrue\fR, the form is annotated to support file attachments up to 1MiB in
size.
.SS papplClientIsAuthorized
Determine whether a client is authorized for
administrative requests.
.PP
.nf
http_status_t  papplClientIsAuthorized (
    pappl_client_t *client
);
.fi
.PP
This function determines whether a client is authorized to submit an
administrative request.
.PP
The return value is \fBHTTP_STATUS_CONTINUE\fR if access is authorized,
\fBHTTP_STATUS_FORBIDDEN\fR if access is not allowed, \fBHTTP_STATUS_UNAUTHORIZED\fR
if authorization is required, or \fBHTTP_STATUS_UPGRADE_REQUIRED\fR if the
connection needs to be encrypted.  All of these values can be passed to the
\fIpapplClientRespond\fR function.
.SS papplClientRespond
Send a regular HTTP response.
.PP
.nf
bool  papplClientRespond (
    pappl_client_t *client,
    http_status_t code,
    const char *content_encoding,
    const char *type,
    time_t last_modified,
    size_t length
);
.fi
.PP
This function sends all of the required HTTP fields and includes standard
messages for errors.  The following values for "code" are explicitly
supported:
.PP
.IP \(bu 5
\fBHTTP_STATUS_OK\fR: The request is successful.
.IP \(bu 5
\fBHTTP_STATUS_BAD_REQUEST\fR: The client submitted a bad request.
.IP \(bu 5
\fBHTTP_STATUS_CONTINUE\fR: An authentication challenge is not needed.
.IP \(bu 5
\fBHTTP_STATUS_FORBIDDEN\fR: Authenticated but not allowed.
.IP \(bu 5
\fBHTTP_STATUS_METHOD_NOT_ALLOWED\fR: The HTTP method is not supported for the
given URI.
.IP \(bu 5
\fBHTTP_STATUS_UNAUTHORIZED\fR: Not authenticated.
.IP \(bu 5
\fBHTTP_STATUS_UPGRADE_REQUIRED\fR: Redirects the client to a secure page.
.PP
Use the \fIpapplClientRespondRedirect\fR when you need to redirect the
client to another page.
.SS papplClientRespondRedirect
Respond with a redirect to another page.
.PP
.nf
bool  papplClientRespondRedirect (
    pappl_client_t *client,
    http_status_t code,
    const char *path
);
.fi
.PP
This function sends a HTTP response that redirects the client to another
page or URL.  The most common "code" value to return is \fBHTTP_STATUS_FOUND\fR.
.SS papplClientSetCookie
Set a cookie for the web browser client.
.PP
.nf
void papplClientSetCookie (
    pappl_client_t *client,
    const char *name,
    const char *value,
    int expires
);
.fi
.PP
This function sets the value of a cookie for the client by updating the
\fBSet-Cookie\fR header in the HTTP response that will be sent.  The "name" and
"value" strings must contain only valid characters for a cookie and its
value as documented in RFC 6265, which basically means letters, numbers, "@",
"-", ".", and "_".
.PP
The "expires" argument specifies how long the cookie will remain active in
seconds, for example \fB3600\fR seconds is one hour and \fB86400\fR seconds is one
day.  If the value is zero or less, a "session" cookie is created instead
which will expire as soon as the web browser is closed.
.SS papplClientValidateForm
Validate HTML form variables.
.PP
.nf
bool  papplClientValidateForm (
    pappl_client_t *client,
    int num_form,
    cups_option_t *form
);
.fi
.PP
This function validates the contents of a HTML form using the CSRF token
included as a hidden variable.  When sending a HTML form you should use the
\fIpapplClientStartForm\fR function to start the HTML form and insert the
CSRF token for later validation.
.PP
.IN 5
Note: Callers are expected to validate all other form variables.
.SH AUTHOR
.PP
Michael R Sweet
.SH COPYRIGHT
.PP
Copyright (c) 2020 by Michael R Sweet
